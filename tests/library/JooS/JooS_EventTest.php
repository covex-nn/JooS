<?php

require_once "JooS/Event.php";

require_once "JooS/Event/PHPUnit/Testing.php";

/**
 * Test class for JooS_Event.
 * Generated by PHPUnit on 2010-10-11 at 01:07:28.
 */
class JooS_EventTest extends PHPUnit_Framework_TestCase
{

  public function testCreate()
  {
    $event = JooS_Event_PHPUnit_Testing::getInstance();
    $event->setParam1(1);

    $this->assertTrue(isset($event->param1));
    $this->assertEquals(1, $event->param1);
    unset($event->param1);
    $this->assertTrue(!isset($event->param1));

    $event->setParam2(2);
    $this->assertEquals(2, $event->param2);
    $event->setParam2(null);
    $this->assertTrue(!isset($event->param2));

    $this->assertEquals("JooS_Event_PHPUnit_Testing", $event->name());
  }

  public function testNotify()
  {
    $event = JooS_Event_PHPUnit_Testing::getInstance();
    $event->setParam1(1);

    $this->assertEquals(0, sizeof($event->observers()));

    $var1 = 0;
    $observer = function(JooS_Event_PHPUnit_Testing $event) use (&$var1)
      {
        $var1 = $event->param1;
      };

    $event->attach($observer);
    $this->assertEquals(1, sizeof($event->observers()));
    $this->assertEquals(array($observer), $event->observers());

    $event
      ->attach("observer_not_exists")
      ->notify()
      ->detach("observer_not_exists")
      ->detach($observer);

    $this->assertEquals(1, $var1);
    $this->assertEquals(0, sizeof($event->observers()));
  }

  public function testClearInstance()
  {
    $event = JooS_Event_PHPUnit_Testing::getInstance();
    $event->attach(function(JooS_Event_PHPUnit_Testing $event)
      {
        
      });

    $this->assertEquals(1, sizeof($event->observers()));

    JooS_Event::clearInstance("JooS_Event_PHPUnit_Testing");

    $event1 = JooS_Event_PHPUnit_Testing::getInstance();
  }

  /**
   * @expectedException JooS_Event_Exception
   */
  public function testCancel()
  {
    $event = JooS_Event_PHPUnit_Testing::getInstance();
    $event->cancel();
  }

  /**
   * @expectedException JooS_Event_Exception
   */
  public function testClone()
  {
    $event = clone JooS_Event_PHPUnit_Testing::getInstance();
  }

}

